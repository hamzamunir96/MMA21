{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# [Hamza, Munir]\n",
    "# [Student number]\n",
    "# [MMA]\n",
    "# MMA 869\n",
    "# [15/08/2020]\n",
    "\n",
    "\n",
    "# Answer to Question 7, Part 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\"\n",
    "import numpy as np \n",
    "import pandas as pd\n",
    "import pandas_profiling\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import roc_curve, auc, roc_auc_score, classification_report, confusion_matrix, make_scorer\n",
    "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n",
    "# decision tree for feature importance on a regression problem\n",
    "from sklearn.datasets import make_regression\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from matplotlib import pyplot\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "from sklearn.preprocessing import LabelEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\hp\\\\Documents\\\\Smith School of Business\\\\M896-ML & AI\\\\Assignment 1'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part (a). Load, Clean & Preprocess the Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"https://raw.githubusercontent.com/stepthom/sandbox/master/data/OJ.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1070 entries, 0 to 1069\n",
      "Data columns (total 19 columns):\n",
      " #   Column          Non-Null Count  Dtype  \n",
      "---  ------          --------------  -----  \n",
      " 0   ID              1070 non-null   int64  \n",
      " 1   Purchase        1070 non-null   object \n",
      " 2   WeekofPurchase  1070 non-null   int64  \n",
      " 3   StoreID         1070 non-null   int64  \n",
      " 4   PriceCH         1070 non-null   float64\n",
      " 5   PriceMM         1070 non-null   float64\n",
      " 6   DiscCH          1070 non-null   float64\n",
      " 7   DiscMM          1070 non-null   float64\n",
      " 8   SpecialCH       1070 non-null   int64  \n",
      " 9   SpecialMM       1070 non-null   int64  \n",
      " 10  LoyalCH         1070 non-null   float64\n",
      " 11  SalePriceMM     1070 non-null   float64\n",
      " 12  SalePriceCH     1070 non-null   float64\n",
      " 13  PriceDiff       1070 non-null   float64\n",
      " 14  Store7          1070 non-null   object \n",
      " 15  PctDiscMM       1070 non-null   float64\n",
      " 16  PctDiscCH       1070 non-null   float64\n",
      " 17  ListPriceDiff   1070 non-null   float64\n",
      " 18  STORE           1070 non-null   int64  \n",
      "dtypes: float64(11), int64(6), object(2)\n",
      "memory usage: 159.0+ KB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Purchase</th>\n",
       "      <th>WeekofPurchase</th>\n",
       "      <th>StoreID</th>\n",
       "      <th>PriceCH</th>\n",
       "      <th>PriceMM</th>\n",
       "      <th>DiscCH</th>\n",
       "      <th>DiscMM</th>\n",
       "      <th>SpecialCH</th>\n",
       "      <th>SpecialMM</th>\n",
       "      <th>LoyalCH</th>\n",
       "      <th>SalePriceMM</th>\n",
       "      <th>SalePriceCH</th>\n",
       "      <th>PriceDiff</th>\n",
       "      <th>Store7</th>\n",
       "      <th>PctDiscMM</th>\n",
       "      <th>PctDiscCH</th>\n",
       "      <th>ListPriceDiff</th>\n",
       "      <th>STORE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>CH</td>\n",
       "      <td>237</td>\n",
       "      <td>1</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.99</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1.99</td>\n",
       "      <td>1.75</td>\n",
       "      <td>0.24</td>\n",
       "      <td>No</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>CH</td>\n",
       "      <td>239</td>\n",
       "      <td>1</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.99</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.75</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>No</td>\n",
       "      <td>0.150754</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>CH</td>\n",
       "      <td>245</td>\n",
       "      <td>1</td>\n",
       "      <td>1.86</td>\n",
       "      <td>2.09</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.680000</td>\n",
       "      <td>2.09</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.40</td>\n",
       "      <td>No</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.091398</td>\n",
       "      <td>0.23</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>MM</td>\n",
       "      <td>227</td>\n",
       "      <td>1</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.00</td>\n",
       "      <td>No</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>CH</td>\n",
       "      <td>228</td>\n",
       "      <td>7</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.956535</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.00</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID Purchase  WeekofPurchase  StoreID  PriceCH  PriceMM  DiscCH  DiscMM  \\\n",
       "0   1       CH             237        1     1.75     1.99    0.00     0.0   \n",
       "1   2       CH             239        1     1.75     1.99    0.00     0.3   \n",
       "2   3       CH             245        1     1.86     2.09    0.17     0.0   \n",
       "3   4       MM             227        1     1.69     1.69    0.00     0.0   \n",
       "4   5       CH             228        7     1.69     1.69    0.00     0.0   \n",
       "\n",
       "   SpecialCH  SpecialMM   LoyalCH  SalePriceMM  SalePriceCH  PriceDiff Store7  \\\n",
       "0          0          0  0.500000         1.99         1.75       0.24     No   \n",
       "1          0          1  0.600000         1.69         1.75      -0.06     No   \n",
       "2          0          0  0.680000         2.09         1.69       0.40     No   \n",
       "3          0          0  0.400000         1.69         1.69       0.00     No   \n",
       "4          0          0  0.956535         1.69         1.69       0.00    Yes   \n",
       "\n",
       "   PctDiscMM  PctDiscCH  ListPriceDiff  STORE  \n",
       "0   0.000000   0.000000           0.24      1  \n",
       "1   0.150754   0.000000           0.24      1  \n",
       "2   0.000000   0.091398           0.23      1  \n",
       "3   0.000000   0.000000           0.00      1  \n",
       "4   0.000000   0.000000           0.00      0  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.info()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Missing value analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0        0\n",
       "Purchase          0\n",
       "WeekofPurchase    0\n",
       "StoreID           0\n",
       "PriceCH           0\n",
       "PriceMM           0\n",
       "DiscCH            0\n",
       "DiscMM            0\n",
       "SpecialCH         0\n",
       "SpecialMM         0\n",
       "LoyalCH           0\n",
       "SalePriceMM       0\n",
       "SalePriceCH       0\n",
       "PriceDiff         0\n",
       "Store7            0\n",
       "PctDiscMM         0\n",
       "PctDiscCH         0\n",
       "ListPriceDiff     0\n",
       "STORE             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "target_col = 'Purchase'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Class 0: 653\n",
      "Class 1: 417\n",
      "Proportion: 1.57 : 1\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "target_count = df.Purchase.value_counts()\n",
    "print('Class 0:', target_count[0])\n",
    "print('Class 1:', target_count[1])\n",
    "print('Proportion:', round(target_count[0] / target_count[1], 2), ': 1')\n",
    "\n",
    "target_count.plot(kind='bar', title='Count (target)');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The data is almost equal to balanced with the ratio 1.57 so we don't to rebalance the data as otherwise it would not reflect the actual results "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Drop the target variable from the data frame and assign it as y-fetaure\n",
    "X = df.drop([target_col], axis=1)\n",
    "y = df[target_col]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### By using encoding, we will convert Citrus Hill to 0 and Minute Maid to 1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ordinal encode target variable\n",
    "label_encoder = LabelEncoder()\n",
    "y = label_encoder.fit_transform(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>WeekofPurchase</th>\n",
       "      <th>StoreID</th>\n",
       "      <th>PriceCH</th>\n",
       "      <th>PriceMM</th>\n",
       "      <th>DiscCH</th>\n",
       "      <th>DiscMM</th>\n",
       "      <th>SpecialCH</th>\n",
       "      <th>SpecialMM</th>\n",
       "      <th>LoyalCH</th>\n",
       "      <th>SalePriceMM</th>\n",
       "      <th>SalePriceCH</th>\n",
       "      <th>PriceDiff</th>\n",
       "      <th>PctDiscMM</th>\n",
       "      <th>PctDiscCH</th>\n",
       "      <th>ListPriceDiff</th>\n",
       "      <th>STORE</th>\n",
       "      <th>Store7_Yes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>237</td>\n",
       "      <td>1</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.99</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.500000</td>\n",
       "      <td>1.99</td>\n",
       "      <td>1.75</td>\n",
       "      <td>0.24</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>239</td>\n",
       "      <td>1</td>\n",
       "      <td>1.75</td>\n",
       "      <td>1.99</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.75</td>\n",
       "      <td>-0.06</td>\n",
       "      <td>0.150754</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.24</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>245</td>\n",
       "      <td>1</td>\n",
       "      <td>1.86</td>\n",
       "      <td>2.09</td>\n",
       "      <td>0.17</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.680000</td>\n",
       "      <td>2.09</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.40</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.091398</td>\n",
       "      <td>0.23</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>227</td>\n",
       "      <td>1</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.400000</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>228</td>\n",
       "      <td>7</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.956535</td>\n",
       "      <td>1.69</td>\n",
       "      <td>1.69</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  WeekofPurchase  StoreID  PriceCH  PriceMM  DiscCH  DiscMM  \\\n",
       "0           1             237        1     1.75     1.99    0.00     0.0   \n",
       "1           2             239        1     1.75     1.99    0.00     0.3   \n",
       "2           3             245        1     1.86     2.09    0.17     0.0   \n",
       "3           4             227        1     1.69     1.69    0.00     0.0   \n",
       "4           5             228        7     1.69     1.69    0.00     0.0   \n",
       "\n",
       "   SpecialCH  SpecialMM   LoyalCH  SalePriceMM  SalePriceCH  PriceDiff  \\\n",
       "0          0          0  0.500000         1.99         1.75       0.24   \n",
       "1          0          1  0.600000         1.69         1.75      -0.06   \n",
       "2          0          0  0.680000         2.09         1.69       0.40   \n",
       "3          0          0  0.400000         1.69         1.69       0.00   \n",
       "4          0          0  0.956535         1.69         1.69       0.00   \n",
       "\n",
       "   PctDiscMM  PctDiscCH  ListPriceDiff  STORE  Store7_Yes  \n",
       "0   0.000000   0.000000           0.24      1           0  \n",
       "1   0.150754   0.000000           0.24      1           0  \n",
       "2   0.000000   0.091398           0.23      1           0  \n",
       "3   0.000000   0.000000           0.00      1           0  \n",
       "4   0.000000   0.000000           0.00      0           1  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# \"Cleaning\" the data -- wrapping up: creating dummy variables for non-numbers (\"one hot encoding\")\n",
    "X = pd.get_dummies(X, columns = X.select_dtypes(exclude=['int64','float64']).columns, drop_first = True)\n",
    "\n",
    "pd.options.display.max_columns = None # remove the limit on the number of columns by default only 20 are shows\n",
    "\n",
    "X.head()  # our dataset now has 252 columns(!)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part (b). Split the data into train-test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We divided data into train 80% and test 20%. Once we train the model on 80% of the data and then running the model on remaining 20% of the data to see how our model is performing. To identify we can look into multiple meaures such as AUC, ROC curve etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1070, 18)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "(856, 18)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape\n",
    "X_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Part(C). Build three different models "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.Random Forest "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# First we define a set of functions to compute the metrics of the model\n",
    "\n",
    "# ROC curve\n",
    "def plot_roc(y_test, y_pred):\n",
    "    fpr, tpr, thresholds = roc_curve(y_test, y_pred, pos_label=1, drop_intermediate = False)\n",
    "    roc_auc = auc(fpr, tpr)\n",
    "    plt.figure()\n",
    "    lw = 2\n",
    "    plt.plot(fpr, tpr, color='darkorange',\n",
    "             lw=lw, label='ROC curve (AUC = %0.2f)' % roc_auc)\n",
    "    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\n",
    "    plt.xlim([-0.001, 1.001])\n",
    "    plt.ylim([-0.001, 1.001])\n",
    "    plt.xlabel('1-Specificity (False Negative Rate)')\n",
    "    plt.ylabel('Sensitivity (True Positive Rate)')\n",
    "    plt.title('ROC curve')\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    plt.show()\n",
    "\n",
    "# Confusion Matrix returns in the format: cm[0,0], cm[0,1], cm[1,0], cm[1,1]: tn, fp, fn, tp\n",
    "\n",
    "# Sensitivity\n",
    "def custom_sensitivity_score(y_test, y_pred):\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    tn, fp, fn, tp = cm[0][0], cm[0][1], cm[1][0], cm[1][1]\n",
    "    return (tp/(tp+fn))\n",
    "\n",
    "# Specificity\n",
    "def custom_specificity_score(y_test, y_pred):\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    tn, fp, fn, tp = cm[0][0], cm[0][1], cm[1][0], cm[1][1]\n",
    "    return (tn/(tn+fp))\n",
    "\n",
    "# Positive Predictive Value\n",
    "def custom_ppv_score(y_test, y_pred):\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    tn, fp, fn, tp = cm[0][0], cm[0][1], cm[1][0], cm[1][1]\n",
    "    return (tp/(tp+fp))\n",
    "\n",
    "# Negative Predictive Value\n",
    "def custom_npv_score(y_test, y_pred):\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    tn, fp, fn, tp = cm[0][0], cm[0][1], cm[1][0], cm[1][1]\n",
    "    return (tn/(tn+fn))\n",
    "\n",
    "# Accuracy\n",
    "def custom_accuracy_score(y_test, y_pred):\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    tn, fp, fn, tp = cm[0][0], cm[0][1], cm[1][0], cm[1][1]\n",
    "    return ((tn+tp)/(tn+tp+fn+fp))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
       "                       criterion='gini', max_depth=None, max_features='auto',\n",
       "                       max_leaf_nodes=None, max_samples=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
       "                       n_jobs=None, oob_score=False, random_state=77300,\n",
       "                       verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define a random forest model and call it classifier_RF\n",
    "classifier_RF = RandomForestClassifier(random_state=77300) # recall what random_state mean\n",
    "\n",
    "# Train the model classifier_RF on the training data\n",
    "classifier_RF.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Metrics of the Random Forest model: \n",
      "\n",
      "Confusion matrix: \n",
      "[[106  30]\n",
      " [ 24  54]]\n",
      "                                   Accuracy: 0.7476635514018691\n",
      "                   SENSITIVITY (aka RECALL): 0.6428571428571429\n",
      "                 SPECIFICITY (aka FALL-OUT): 0.8153846153846154\n",
      " POSITIVE PREDICTIVE VALUE, (aka PRECISION): 0.6923076923076923\n",
      "                 NEGATIVE PREDICTIVE VALUE): 0.7794117647058824\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " AUC: 0.8413003663003663\n"
     ]
    }
   ],
   "source": [
    "class_threshold = 0.50\n",
    "y_pred_prob = classifier_RF.predict_proba(X_test)[:,1] # probabilities \n",
    "y_pred = np.where(y_pred_prob > class_threshold, 1, 0) # classification\n",
    "\n",
    "# Lets look at the model metrics\n",
    "\n",
    "print('Metrics of the Random Forest model: \\n')\n",
    "\n",
    "cm = np.transpose(confusion_matrix(y_test, y_pred))\n",
    "print(\"Confusion matrix: \\n\" + str(cm))\n",
    "\n",
    "print(\"                                   Accuracy: \" + str(custom_accuracy_score(y_test, y_pred))) \n",
    "print(\"                   SENSITIVITY (aka RECALL): \" + str(custom_sensitivity_score(y_test, y_pred)))\n",
    "print(\"                 SPECIFICITY (aka FALL-OUT): \" + str(custom_specificity_score(y_test, y_pred)))\n",
    "print(\" POSITIVE PREDICTIVE VALUE, (aka PRECISION): \" + str(custom_ppv_score(y_test, y_pred)))\n",
    "print(\"                 NEGATIVE PREDICTIVE VALUE): \" + str(custom_npv_score(y_test, y_pred)))\n",
    "\n",
    "plot_roc(y_test, y_pred_prob)\n",
    "print(\" AUC: \" + str(roc_auc_score(y_test, y_pred_prob)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hyper Parameter tuning -Random Forest "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimized hyper-parameters:{'n_estimators': 600}\n",
      "Metrics of the Random Forest model with the optimized hyper-parameter for the \"number of trees\": \n",
      "\n",
      "Confusion matrix: \n",
      "[[106  29]\n",
      " [ 24  55]]\n",
      "                                   Accuracy: 0.7523364485981309\n",
      "                   SENSITIVITY (aka RECALL): 0.6547619047619048\n",
      "                 SPECIFICITY (aka FALL-OUT): 0.8153846153846154\n",
      " POSITIVE PREDICTIVE VALUE, (aka PRECISION): 0.6962025316455697\n",
      "                 NEGATIVE PREDICTIVE VALUE): 0.7851851851851852\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " AUC: 0.843956043956044\n"
     ]
    }
   ],
   "source": [
    "# Hyper-parameter tuning (\"optimization\") using the function GridSearchCV for maximizing AUC\n",
    "score_func = make_scorer(roc_auc_score, greater_is_better=True)\n",
    "\n",
    "n_trees = [100, 200, 300, 400, 500, 600] # as an example, we will tune the \"numeber of trees\" hyper-parameter (n_trees) and we will consider values of 100, 200, ... 600 trees in the forest\n",
    "Grid_srch_parameters_list = [ [{'n_estimators':n_trees}] ] \n",
    "\n",
    "# we will apply a 5-fold cross-validation and call the resultant function \"grid_search\"\n",
    "grid_search = GridSearchCV(estimator = classifier_RF, cv = 5, param_grid = Grid_srch_parameters_list[0], scoring = score_func,\n",
    "                              return_train_score = True) \n",
    "\n",
    "# apply function grid_search to the training data, call the resultand best model grid_search_RF\n",
    "grid_search_RF = grid_search.fit(X_train, y_train)\n",
    "\n",
    "# use the best model to predict the testing data\n",
    "y_pred_prob = grid_search_RF.predict_proba(X_test)[:,1] # probabilities  \n",
    "y_pred = np.where(y_pred_prob > class_threshold, 1, 0) # classification\n",
    "\n",
    "print('Optimized hyper-parameters:' + str(grid_search.best_params_))\n",
    "    \n",
    "# Lets look at the model metrics\n",
    "\n",
    "print('Metrics of the Random Forest model with the optimized hyper-parameter for the \"number of trees\": \\n')\n",
    "\n",
    "cm = np.transpose(confusion_matrix(y_test, y_pred))\n",
    "print(\"Confusion matrix: \\n\" + str(cm))\n",
    "\n",
    "print(\"                                   Accuracy: \" + str(custom_accuracy_score(y_test, y_pred))) \n",
    "print(\"                   SENSITIVITY (aka RECALL): \" + str(custom_sensitivity_score(y_test, y_pred)))\n",
    "print(\"                 SPECIFICITY (aka FALL-OUT): \" + str(custom_specificity_score(y_test, y_pred)))\n",
    "print(\" POSITIVE PREDICTIVE VALUE, (aka PRECISION): \" + str(custom_ppv_score(y_test, y_pred)))\n",
    "print(\"                 NEGATIVE PREDICTIVE VALUE): \" + str(custom_npv_score(y_test, y_pred)))\n",
    "\n",
    "plot_roc(y_test, y_pred_prob)\n",
    "print(\" AUC: \" + str(roc_auc_score(y_test, y_pred_prob)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.Gradient Boosting "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,\n",
       "                           learning_rate=0.1, loss='deviance', max_depth=3,\n",
       "                           max_features=None, max_leaf_nodes=None,\n",
       "                           min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                           min_samples_leaf=1, min_samples_split=2,\n",
       "                           min_weight_fraction_leaf=0.0, n_estimators=100,\n",
       "                           n_iter_no_change=None, presort='deprecated',\n",
       "                           random_state=77300, subsample=1.0, tol=0.0001,\n",
       "                           validation_fraction=0.1, verbose=0,\n",
       "                           warm_start=False)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the gradient boosting machine model and call it classifier_GBM\n",
    "classifier_GBM = GradientBoostingClassifier(random_state=77300)\n",
    "\n",
    "# Train the model classifier_GBM on the training data\n",
    "classifier_GBM.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Metrics of the Gradient Boosting Machine model: \n",
      "\n",
      "Confusion matrix: \n",
      "[[114  23]\n",
      " [ 16  61]]\n",
      "                                   Accuracy: 0.8177570093457944\n",
      "                   SENSITIVITY (aka RECALL): 0.7261904761904762\n",
      "                 SPECIFICITY (aka FALL-OUT): 0.8769230769230769\n",
      " POSITIVE PREDICTIVE VALUE, (aka PRECISION): 0.7922077922077922\n",
      "                 NEGATIVE PREDICTIVE VALUE): 0.8321167883211679\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " AUC: 0.8787545787545787\n"
     ]
    }
   ],
   "source": [
    "# Use the trained model to predict testing data\n",
    "y_pred_prob = classifier_GBM.predict_proba(X_test)[:,1] # probabilities \n",
    "y_pred = np.where(y_pred_prob > class_threshold, 1, 0) # classification\n",
    "\n",
    "# Lets look at the model metrics\n",
    "\n",
    "print('Metrics of the Gradient Boosting Machine model: \\n')\n",
    "\n",
    "cm = np.transpose(confusion_matrix(y_test, y_pred))\n",
    "print(\"Confusion matrix: \\n\" + str(cm))\n",
    "\n",
    "print(\"                                   Accuracy: \" + str(custom_accuracy_score(y_test, y_pred))) \n",
    "print(\"                   SENSITIVITY (aka RECALL): \" + str(custom_sensitivity_score(y_test, y_pred)))\n",
    "print(\"                 SPECIFICITY (aka FALL-OUT): \" + str(custom_specificity_score(y_test, y_pred)))\n",
    "print(\" POSITIVE PREDICTIVE VALUE, (aka PRECISION): \" + str(custom_ppv_score(y_test, y_pred)))\n",
    "print(\"                 NEGATIVE PREDICTIVE VALUE): \" + str(custom_npv_score(y_test, y_pred)))\n",
    "\n",
    "plot_roc(y_test, y_pred_prob)\n",
    "print(\" AUC: \" + str(roc_auc_score(y_test, y_pred_prob)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hyper-parameter tuning- Gradient Boosting "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimized hyper-parameters:{'learning_rate': 0.01, 'n_estimators': 300}\n",
      "Metrics of the Gradient Boosting Machine model with the optimized hyper-parameters\": \n",
      "\n",
      "Confusion matrix: \n",
      "[[115  27]\n",
      " [ 15  57]]\n",
      "                                   Accuracy: 0.8037383177570093\n",
      "                   SENSITIVITY (aka RECALL): 0.6785714285714286\n",
      "                 SPECIFICITY (aka FALL-OUT): 0.8846153846153846\n",
      " POSITIVE PREDICTIVE VALUE, (aka PRECISION): 0.7916666666666666\n",
      "                 NEGATIVE PREDICTIVE VALUE): 0.8098591549295775\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " AUC: 0.889606227106227\n"
     ]
    }
   ],
   "source": [
    "# Hyper-parameter tuning (\"optimization\") using the function GridSearchCV for maximizing AUC\n",
    "score_func = make_scorer(roc_auc_score, greater_is_better=True)\n",
    "\n",
    "# as an example, we will tune two parameters\n",
    "n_trees = [100, 200, 300, 400, 500, 600] # first, the \"numeber of trees\" hyper-parameter (n_trees) and we will consider values of 100, 200, ... 600 trees in the forest\n",
    "learning_rates = [0.01, 0.1] # second, speed of boosting (\"learning rate\") and we will use two values 0.01 и 0.1\n",
    "\n",
    "Grid_srch_parameters_list = [ [{'n_estimators':n_trees, 'learning_rate': learning_rates}] ] \n",
    "\n",
    "# we will apply a 5-fold cross-validation and call the resultant function \"grid_search\"\n",
    "grid_search = GridSearchCV(estimator = classifier_GBM, cv = 5, param_grid = Grid_srch_parameters_list[0], scoring = score_func,\n",
    "                              return_train_score = True) \n",
    "\n",
    "# # apply function grid_search to the training data, call the resultant best model grid_search_GBM\n",
    "grid_search_GBM = grid_search.fit(X_train, y_train)\n",
    "\n",
    "# use the best model to predict the testing data \n",
    "y_pred_prob = grid_search_GBM.predict_proba(X_test)[:,1] # probabilities\n",
    "y_pred = np.where(y_pred_prob > class_threshold, 1, 0) # classification\n",
    "\n",
    "print('Optimized hyper-parameters:' + str(grid_search.best_params_))\n",
    "\n",
    "# Lets look at the model metrics\n",
    "\n",
    "print('Metrics of the Gradient Boosting Machine model with the optimized hyper-parameters\": \\n')\n",
    "\n",
    "cm = np.transpose(confusion_matrix(y_test, y_pred))\n",
    "print(\"Confusion matrix: \\n\" + str(cm))\n",
    "\n",
    "print(\"                                   Accuracy: \" + str(custom_accuracy_score(y_test, y_pred))) \n",
    "print(\"                   SENSITIVITY (aka RECALL): \" + str(custom_sensitivity_score(y_test, y_pred)))\n",
    "print(\"                 SPECIFICITY (aka FALL-OUT): \" + str(custom_specificity_score(y_test, y_pred)))\n",
    "print(\" POSITIVE PREDICTIVE VALUE, (aka PRECISION): \" + str(custom_ppv_score(y_test, y_pred)))\n",
    "print(\"                 NEGATIVE PREDICTIVE VALUE): \" + str(custom_npv_score(y_test, y_pred)))\n",
    "\n",
    "plot_roc(y_test, y_pred_prob)\n",
    "print(\" AUC: \" + str(roc_auc_score(y_test, y_pred_prob)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Summary for Graident Boosting  \n",
    "Trained the model on 80% of the data .By doing hyper parameter tuning, the AUC has been increased to 88.96% from 87.85%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Logistic Regression "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# define the model and call it classifier_LR\n",
    "classifier_LR = LogisticRegression()\n",
    "\n",
    "# train classifier_LR on the training data\n",
    "classifier_LR.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.14005338 0.76909722 0.38573027 0.36406987 0.96609695]\n",
      "[0 1 0 0 1]\n",
      "[0 1 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "# Use the trained model to predict testing data\n",
    "\n",
    "y_pred_prob = classifier_LR.predict_proba(X_test)[:,1] # probabilities\n",
    "\n",
    "# Select the threshold value -- we will use Т=0.6073. Why? Why not 50%? Because 60.73% -- is the average probability of retention in our data (1451 \"1\"s out of 2389 datapoints) \n",
    "class_threshold = 0.6073\n",
    "\n",
    "y_pred = np.where(y_pred_prob > class_threshold, 1, 0) # applying the threshold rule to classify\n",
    "\n",
    "print(y_pred_prob[0:5]) # first 5 probabilities \n",
    "print(y_pred[0:5]) # resultant predicted classification \n",
    "print(y_test[0:5]) # actual outcomes\n",
    "\n",
    "# oops ... for the first 5 customers our model made two mistakes: on 1st customer (\"false positive\") and on 3rd customer (\"false negative\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Metrics of the logistic regression model: \n",
      "\n",
      "Confusion matrix: \n",
      "[[121  31]\n",
      " [  9  53]]\n",
      "                                   Accuracy: 0.8130841121495327\n",
      "                   SENSITIVITY (aka RECALL): 0.6309523809523809\n",
      "                 SPECIFICITY (aka FALL-OUT): 0.9307692307692308\n",
      " POSITIVE PREDICTIVE VALUE, (aka PRECISION): 0.8548387096774194\n",
      "                 NEGATIVE PREDICTIVE VALUE): 0.7960526315789473\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " AUC: 0.8971611721611721\n"
     ]
    }
   ],
   "source": [
    "# Lets look at the model metrics \n",
    "print('Metrics of the logistic regression model: \\n')\n",
    "\n",
    "cm = np.transpose(confusion_matrix(y_test, y_pred))\n",
    "print(\"Confusion matrix: \\n\" + str(cm))\n",
    "\n",
    "print(\"                                   Accuracy: \" + str(custom_accuracy_score(y_test, y_pred))) \n",
    "print(\"                   SENSITIVITY (aka RECALL): \" + str(custom_sensitivity_score(y_test, y_pred)))\n",
    "print(\"                 SPECIFICITY (aka FALL-OUT): \" + str(custom_specificity_score(y_test, y_pred)))\n",
    "print(\" POSITIVE PREDICTIVE VALUE, (aka PRECISION): \" + str(custom_ppv_score(y_test, y_pred)))\n",
    "print(\"                 NEGATIVE PREDICTIVE VALUE): \" + str(custom_npv_score(y_test, y_pred)))\n",
    "\n",
    "plot_roc(y_test, y_pred_prob)\n",
    "print(\" AUC: \" + str(roc_auc_score(y_test, y_pred_prob)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RFE(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False,\n",
       "                                 fit_intercept=True, intercept_scaling=1,\n",
       "                                 l1_ratio=None, max_iter=100,\n",
       "                                 multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                                 random_state=None, solver='lbfgs', tol=0.0001,\n",
       "                                 verbose=0, warm_start=False),\n",
       "    n_features_to_select=20, step=1, verbose=0)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Apply variable selection with Stepwise Recursive Feature Selection \n",
    "\n",
    "from sklearn.feature_selection import RFE\n",
    "\n",
    "rfe = RFE(estimator=classifier_LR, n_features_to_select=20, step=1) # in this example we will select 20 variables; this number \"20\" is a hyperparameter to tune\n",
    "rfe.fit(X_train, y_train)\n",
    "ranking = rfe.ranking_.reshape(len(X_train.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Metrics of the logistic regression model after variable selection: \n",
      "\n",
      "Confusion matrix: \n",
      "[[121  31]\n",
      " [  9  53]]\n",
      "                                   Accuracy: 0.8130841121495327\n",
      "                   SENSITIVITY (aka RECALL): 0.6309523809523809\n",
      "                 SPECIFICITY (aka FALL-OUT): 0.9307692307692308\n",
      " POSITIVE PREDICTIVE VALUE, (aka PRECISION): 0.8548387096774194\n",
      "                 NEGATIVE PREDICTIVE VALUE): 0.7960526315789473\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " AUC: 0.8971611721611721\n"
     ]
    }
   ],
   "source": [
    "# Train the model and call it classifier_LR_RFE \n",
    "classifier_LR_RFE = rfe.fit(X_train, y_train)\n",
    "\n",
    "# Use the trained model to predict testing data\n",
    "y_pred_prob = classifier_LR_RFE.predict_proba(X_test)[:,1] # probabilities\n",
    "y_pred = np.where(y_pred_prob > class_threshold, 1, 0) # classification\n",
    "\n",
    "\n",
    "# Lets look at the model metrics after variable selection \n",
    "print('Metrics of the logistic regression model after variable selection: \\n')\n",
    "\n",
    "cm = np.transpose(confusion_matrix(y_test, y_pred))\n",
    "print(\"Confusion matrix: \\n\" + str(cm))\n",
    "\n",
    "print(\"                                   Accuracy: \" + str(custom_accuracy_score(y_test, y_pred))) \n",
    "print(\"                   SENSITIVITY (aka RECALL): \" + str(custom_sensitivity_score(y_test, y_pred)))\n",
    "print(\"                 SPECIFICITY (aka FALL-OUT): \" + str(custom_specificity_score(y_test, y_pred)))\n",
    "print(\" POSITIVE PREDICTIVE VALUE, (aka PRECISION): \" + str(custom_ppv_score(y_test, y_pred)))\n",
    "print(\"                 NEGATIVE PREDICTIVE VALUE): \" + str(custom_npv_score(y_test, y_pred)))\n",
    "\n",
    "plot_roc(y_test, y_pred_prob)\n",
    "print(\" AUC: \" + str(roc_auc_score(y_test, y_pred_prob)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Summary for Logistic Regression \n",
    "Trained the model on 80% of the data .By using logistic regression we are getting highest AUC which is 89.71%"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
